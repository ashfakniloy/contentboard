generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type FeaturedImage {
  imageId    String
  imageUrl   String
  imageTitle String
  altText    String
}

model Admin {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  email    String @unique
  password String
  role     String @default("ADMIN")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  role     String @default("USER")
  username String @unique
  email    String @unique
  password String

  logoUrl String?
  logoId  String?

  categories Category[]
  blogs      Blog[]
  medias     Media[]
  messages   Message[]

  blogViews BlogView[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Blog {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  slug            String
  title           String
  body            String
  author          String
  metaDescription String
  categories      String[]
  featuredImage   FeaturedImage
  published       Boolean
  // categories      Category[]
  // bodyImages    BlogMedia[] @relation("BodyImages")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  blogViews BlogView[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([id, userId])
}

model BlogView {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  visitorId String
  viewport  String

  blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId String @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  createdAt DateTime @default(now())

  @@unique([blogId, visitorId])
}

model Media {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl   String
  imageId    String
  imageTitle String
  altText    String

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // blogBody     BlogMedia[] @relation("BodyImages")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([id, userId])
}

// model BlogMedia {
//   id String @id @default(auto()) @map("_id") @db.ObjectId

//   blogId String @db.ObjectId
//   blog   Blog   @relation("BodyImages", fields: [blogId], references: [id])

//   mediaId String @db.ObjectId
//   media   Media  @relation("BodyImages", fields: [mediaId], references: [id])
// }

model Category {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  categoryName String
  slug         String
  description  String

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // blogId String? @db.ObjectId
  // blog   Blog?   @relation(fields: [blogId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([id, userId])
}

model Message {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  username    String
  email       String
  phoneNumber String?
  subject     String?
  message     String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([id, userId])
}

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mongodb"
//   url      = env("DATABASE_URL")
// }

// model Admin {
//   id       String @id @default(auto()) @map("_id") @db.ObjectId
//   email    String @unique
//   password String
//   role     String @default("ADMIN")

//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now()) @updatedAt
// }

// model User {
//   id       String @id @default(auto()) @map("_id") @db.ObjectId
//   role     String @default("USER")
//   username String @unique
//   email    String @unique
//   password String

//   logoUrl String?
//   logoId  String?

//   categories Category[]
//   blogs      Blog[]
//   medias     Media[]
//   messages   Message[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now()) @updatedAt
// }

// model Blog {
//   id              String     @id @default(auto()) @map("_id") @db.ObjectId
//   slug            String     @unique
//   title           String
//   body            String
//   author          String
//   metaDescription String
//   categories      Category[]

//   mediaId       String      @db.ObjectId
//   featuredImage Media       @relation("FeaturedImage", fields: [mediaId], references: [id])
//   bodyImages    BlogMedia[] @relation("BodyImages")

//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId String @db.ObjectId

//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now()) @updatedAt

//   @@unique([id, userId])
// }

// model Media {
//   id         String @id @default(auto()) @map("_id") @db.ObjectId
//   imageUrl   String
//   imageId    String
//   imageTitle String
//   altText    String

//   userId String @db.ObjectId
//   user   User   @relation(fields: [userId], references: [id])

//   blogFeatured Blog[]      @relation("FeaturedImage")
//   blogBody     BlogMedia[] @relation("BodyImages")

//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now()) @updatedAt

//   @@unique([id, userId])
// }

// model BlogMedia {
//   id String @id @default(auto()) @map("_id") @db.ObjectId

//   blogId String @db.ObjectId
//   blog   Blog   @relation("BodyImages", fields: [blogId], references: [id])

//   mediaId String @db.ObjectId
//   media   Media  @relation("BodyImages", fields: [mediaId], references: [id])
// }

// model Category {
//   id           String @id @default(auto()) @map("_id") @db.ObjectId
//   categoryName String @unique
//   slug         String @unique
//   description  String

//   userId String @db.ObjectId
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

//   blogId String? @db.ObjectId
//   blog   Blog?   @relation(fields: [blogId], references: [id])

//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now()) @updatedAt

//   @@unique([id, userId])
// }

// model Message {
//   id       String @id @default(auto()) @map("_id") @db.ObjectId
//   username String
//   email    String
//   phone    String
//   message  String

//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId String @db.ObjectId

//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now()) @updatedAt

//   @@unique([id, userId])
// }
